// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class Approval extends ethereum.Event {
  get params(): Approval__Params {
    return new Approval__Params(this);
  }
}

export class Approval__Params {
  _event: Approval;

  constructor(event: Approval) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get spender(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get value(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class CinchPerformanceFeePercentageUpdated extends ethereum.Event {
  get params(): CinchPerformanceFeePercentageUpdated__Params {
    return new CinchPerformanceFeePercentageUpdated__Params(this);
  }
}

export class CinchPerformanceFeePercentageUpdated__Params {
  _event: CinchPerformanceFeePercentageUpdated;

  constructor(event: CinchPerformanceFeePercentageUpdated) {
    this._event = event;
  }

  get feePercentage(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class DepositPaused extends ethereum.Event {
  get params(): DepositPaused__Params {
    return new DepositPaused__Params(this);
  }
}

export class DepositPaused__Params {
  _event: DepositPaused;

  constructor(event: DepositPaused) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class DepositUnpaused extends ethereum.Event {
  get params(): DepositUnpaused__Params {
    return new DepositUnpaused__Params(this);
  }
}

export class DepositUnpaused__Params {
  _event: DepositUnpaused;

  constructor(event: DepositUnpaused) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class DepositWithReferral extends ethereum.Event {
  get params(): DepositWithReferral__Params {
    return new DepositWithReferral__Params(this);
  }
}

export class DepositWithReferral__Params {
  _event: DepositWithReferral;

  constructor(event: DepositWithReferral) {
    this._event = event;
  }

  get caller(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get receiver(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get assets(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get shares(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get referral(): Address {
    return this._event.parameters[4].value.toAddress();
  }
}

export class Initialized extends ethereum.Event {
  get params(): Initialized__Params {
    return new Initialized__Params(this);
  }
}

export class Initialized__Params {
  _event: Initialized;

  constructor(event: Initialized) {
    this._event = event;
  }

  get version(): i32 {
    return this._event.parameters[0].value.toI32();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class Paused extends ethereum.Event {
  get params(): Paused__Params {
    return new Paused__Params(this);
  }
}

export class Paused__Params {
  _event: Paused;

  constructor(event: Paused) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class Redeem extends ethereum.Event {
  get params(): Redeem__Params {
    return new Redeem__Params(this);
  }
}

export class Redeem__Params {
  _event: Redeem;

  constructor(event: Redeem) {
    this._event = event;
  }

  get caller(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get receiver(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get sharesOwner(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get assets(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get shares(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class RedeemWithReferral extends ethereum.Event {
  get params(): RedeemWithReferral__Params {
    return new RedeemWithReferral__Params(this);
  }
}

export class RedeemWithReferral__Params {
  _event: RedeemWithReferral;

  constructor(event: RedeemWithReferral) {
    this._event = event;
  }

  get caller(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get receiver(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get sharesOwner(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get assets(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get shares(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get referral(): Address {
    return this._event.parameters[5].value.toAddress();
  }
}

export class RevenueShareBalanceByAssetReferralUpdated extends ethereum.Event {
  get params(): RevenueShareBalanceByAssetReferralUpdated__Params {
    return new RevenueShareBalanceByAssetReferralUpdated__Params(this);
  }
}

export class RevenueShareBalanceByAssetReferralUpdated__Params {
  _event: RevenueShareBalanceByAssetReferralUpdated;

  constructor(event: RevenueShareBalanceByAssetReferralUpdated) {
    this._event = event;
  }

  get asset_(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get referral(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get shares_(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class RevenueShareDeposited extends ethereum.Event {
  get params(): RevenueShareDeposited__Params {
    return new RevenueShareDeposited__Params(this);
  }
}

export class RevenueShareDeposited__Params {
  _event: RevenueShareDeposited;

  constructor(event: RevenueShareDeposited) {
    this._event = event;
  }

  get assetsFrom(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get asset(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class RevenueShareReferralAdded extends ethereum.Event {
  get params(): RevenueShareReferralAdded__Params {
    return new RevenueShareReferralAdded__Params(this);
  }
}

export class RevenueShareReferralAdded__Params {
  _event: RevenueShareReferralAdded;

  constructor(event: RevenueShareReferralAdded) {
    this._event = event;
  }

  get referral(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class RevenueShareReferralRemoved extends ethereum.Event {
  get params(): RevenueShareReferralRemoved__Params {
    return new RevenueShareReferralRemoved__Params(this);
  }
}

export class RevenueShareReferralRemoved__Params {
  _event: RevenueShareReferralRemoved;

  constructor(event: RevenueShareReferralRemoved) {
    this._event = event;
  }

  get referral(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class RevenueShareWithdrawn extends ethereum.Event {
  get params(): RevenueShareWithdrawn__Params {
    return new RevenueShareWithdrawn__Params(this);
  }
}

export class RevenueShareWithdrawn__Params {
  _event: RevenueShareWithdrawn;

  constructor(event: RevenueShareWithdrawn) {
    this._event = event;
  }

  get asset(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get referral(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get receiver(): Address {
    return this._event.parameters[3].value.toAddress();
  }
}

export class TotalSharesByUserReferralUpdated extends ethereum.Event {
  get params(): TotalSharesByUserReferralUpdated__Params {
    return new TotalSharesByUserReferralUpdated__Params(this);
  }
}

export class TotalSharesByUserReferralUpdated__Params {
  _event: TotalSharesByUserReferralUpdated;

  constructor(event: TotalSharesByUserReferralUpdated) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get referral(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get shares_(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Transfer extends ethereum.Event {
  get params(): Transfer__Params {
    return new Transfer__Params(this);
  }
}

export class Transfer__Params {
  _event: Transfer;

  constructor(event: Transfer) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get value(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Unpaused extends ethereum.Event {
  get params(): Unpaused__Params {
    return new Unpaused__Params(this);
  }
}

export class Unpaused__Params {
  _event: Unpaused;

  constructor(event: Unpaused) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class YieldSourceVaultUpdated extends ethereum.Event {
  get params(): YieldSourceVaultUpdated__Params {
    return new YieldSourceVaultUpdated__Params(this);
  }
}

export class YieldSourceVaultUpdated__Params {
  _event: YieldSourceVaultUpdated;

  constructor(event: YieldSourceVaultUpdated) {
    this._event = event;
  }

  get yieldSourceVault_(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class RevenueShareVaultRibbonEarn extends ethereum.SmartContract {
  static bind(address: Address): RevenueShareVaultRibbonEarn {
    return new RevenueShareVaultRibbonEarn(
      "RevenueShareVaultRibbonEarn",
      address
    );
  }

  PERFORMANCE_FEE_100_PERCENT(): BigInt {
    let result = super.call(
      "PERFORMANCE_FEE_100_PERCENT",
      "PERFORMANCE_FEE_100_PERCENT():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_PERFORMANCE_FEE_100_PERCENT(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "PERFORMANCE_FEE_100_PERCENT",
      "PERFORMANCE_FEE_100_PERCENT():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  allowance(owner: Address, spender: Address): BigInt {
    let result = super.call(
      "allowance",
      "allowance(address,address):(uint256)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(spender)]
    );

    return result[0].toBigInt();
  }

  try_allowance(owner: Address, spender: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "allowance",
      "allowance(address,address):(uint256)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(spender)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  approve(spender: Address, amount: BigInt): boolean {
    let result = super.call("approve", "approve(address,uint256):(bool)", [
      ethereum.Value.fromAddress(spender),
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);

    return result[0].toBoolean();
  }

  try_approve(spender: Address, amount: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("approve", "approve(address,uint256):(bool)", [
      ethereum.Value.fromAddress(spender),
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  asset(): Address {
    let result = super.call("asset", "asset():(address)", []);

    return result[0].toAddress();
  }

  try_asset(): ethereum.CallResult<Address> {
    let result = super.tryCall("asset", "asset():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  balanceOf(account: Address): BigInt {
    let result = super.call("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(account)
    ]);

    return result[0].toBigInt();
  }

  try_balanceOf(account: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(account)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  cinchPerformanceFeePercentage(): BigInt {
    let result = super.call(
      "cinchPerformanceFeePercentage",
      "cinchPerformanceFeePercentage():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_cinchPerformanceFeePercentage(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "cinchPerformanceFeePercentage",
      "cinchPerformanceFeePercentage():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  decimals(): i32 {
    let result = super.call("decimals", "decimals():(uint8)", []);

    return result[0].toI32();
  }

  try_decimals(): ethereum.CallResult<i32> {
    let result = super.tryCall("decimals", "decimals():(uint8)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  decreaseAllowance(spender: Address, subtractedValue: BigInt): boolean {
    let result = super.call(
      "decreaseAllowance",
      "decreaseAllowance(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(spender),
        ethereum.Value.fromUnsignedBigInt(subtractedValue)
      ]
    );

    return result[0].toBoolean();
  }

  try_decreaseAllowance(
    spender: Address,
    subtractedValue: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "decreaseAllowance",
      "decreaseAllowance(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(spender),
        ethereum.Value.fromUnsignedBigInt(subtractedValue)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  depositPaused(): boolean {
    let result = super.call("depositPaused", "depositPaused():(bool)", []);

    return result[0].toBoolean();
  }

  try_depositPaused(): ethereum.CallResult<boolean> {
    let result = super.tryCall("depositPaused", "depositPaused():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  depositWithReferral(
    amount: BigInt,
    receiver: Address,
    referral: Address
  ): BigInt {
    let result = super.call(
      "depositWithReferral",
      "depositWithReferral(uint256,address,address):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(amount),
        ethereum.Value.fromAddress(receiver),
        ethereum.Value.fromAddress(referral)
      ]
    );

    return result[0].toBigInt();
  }

  try_depositWithReferral(
    amount: BigInt,
    receiver: Address,
    referral: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "depositWithReferral",
      "depositWithReferral(uint256,address,address):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(amount),
        ethereum.Value.fromAddress(receiver),
        ethereum.Value.fromAddress(referral)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getYieldSourceVaultTotalShares(): BigInt {
    let result = super.call(
      "getYieldSourceVaultTotalShares",
      "getYieldSourceVaultTotalShares():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getYieldSourceVaultTotalShares(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getYieldSourceVaultTotalShares",
      "getYieldSourceVaultTotalShares():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  increaseAllowance(spender: Address, addedValue: BigInt): boolean {
    let result = super.call(
      "increaseAllowance",
      "increaseAllowance(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(spender),
        ethereum.Value.fromUnsignedBigInt(addedValue)
      ]
    );

    return result[0].toBoolean();
  }

  try_increaseAllowance(
    spender: Address,
    addedValue: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "increaseAllowance",
      "increaseAllowance(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(spender),
        ethereum.Value.fromUnsignedBigInt(addedValue)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isReferralRegistered(referral_: Address): boolean {
    let result = super.call(
      "isReferralRegistered",
      "isReferralRegistered(address):(bool)",
      [ethereum.Value.fromAddress(referral_)]
    );

    return result[0].toBoolean();
  }

  try_isReferralRegistered(referral_: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isReferralRegistered",
      "isReferralRegistered(address):(bool)",
      [ethereum.Value.fromAddress(referral_)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  maxDeposit(param0: Address): BigInt {
    let result = super.call("maxDeposit", "maxDeposit(address):(uint256)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return result[0].toBigInt();
  }

  try_maxDeposit(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("maxDeposit", "maxDeposit(address):(uint256)", [
      ethereum.Value.fromAddress(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  maxRedeem(sharesOwner_: Address): BigInt {
    let result = super.call("maxRedeem", "maxRedeem(address):(uint256)", [
      ethereum.Value.fromAddress(sharesOwner_)
    ]);

    return result[0].toBigInt();
  }

  try_maxRedeem(sharesOwner_: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("maxRedeem", "maxRedeem(address):(uint256)", [
      ethereum.Value.fromAddress(sharesOwner_)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  name(): string {
    let result = super.call("name", "name():(string)", []);

    return result[0].toString();
  }

  try_name(): ethereum.CallResult<string> {
    let result = super.tryCall("name", "name():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  paused(): boolean {
    let result = super.call("paused", "paused():(bool)", []);

    return result[0].toBoolean();
  }

  try_paused(): ethereum.CallResult<boolean> {
    let result = super.tryCall("paused", "paused():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  redeemWithReferral(
    shares: BigInt,
    receiver: Address,
    sharesOwner: Address,
    referral: Address
  ): BigInt {
    let result = super.call(
      "redeemWithReferral",
      "redeemWithReferral(uint256,address,address,address):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(shares),
        ethereum.Value.fromAddress(receiver),
        ethereum.Value.fromAddress(sharesOwner),
        ethereum.Value.fromAddress(referral)
      ]
    );

    return result[0].toBigInt();
  }

  try_redeemWithReferral(
    shares: BigInt,
    receiver: Address,
    sharesOwner: Address,
    referral: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "redeemWithReferral",
      "redeemWithReferral(uint256,address,address,address):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(shares),
        ethereum.Value.fromAddress(receiver),
        ethereum.Value.fromAddress(sharesOwner),
        ethereum.Value.fromAddress(referral)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  revenueShareBalanceByAssetReferral(param0: Address, param1: Address): BigInt {
    let result = super.call(
      "revenueShareBalanceByAssetReferral",
      "revenueShareBalanceByAssetReferral(address,address):(uint256)",
      [ethereum.Value.fromAddress(param0), ethereum.Value.fromAddress(param1)]
    );

    return result[0].toBigInt();
  }

  try_revenueShareBalanceByAssetReferral(
    param0: Address,
    param1: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "revenueShareBalanceByAssetReferral",
      "revenueShareBalanceByAssetReferral(address,address):(uint256)",
      [ethereum.Value.fromAddress(param0), ethereum.Value.fromAddress(param1)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  shareBalanceAtYieldSourceOf(account: Address): BigInt {
    let result = super.call(
      "shareBalanceAtYieldSourceOf",
      "shareBalanceAtYieldSourceOf(address):(uint256)",
      [ethereum.Value.fromAddress(account)]
    );

    return result[0].toBigInt();
  }

  try_shareBalanceAtYieldSourceOf(
    account: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "shareBalanceAtYieldSourceOf",
      "shareBalanceAtYieldSourceOf(address):(uint256)",
      [ethereum.Value.fromAddress(account)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  symbol(): string {
    let result = super.call("symbol", "symbol():(string)", []);

    return result[0].toString();
  }

  try_symbol(): ethereum.CallResult<string> {
    let result = super.tryCall("symbol", "symbol():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  totalAssetDepositProcessed(): BigInt {
    let result = super.call(
      "totalAssetDepositProcessed",
      "totalAssetDepositProcessed():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_totalAssetDepositProcessed(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "totalAssetDepositProcessed",
      "totalAssetDepositProcessed():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalRevenueShareProcessedByAsset(param0: Address): BigInt {
    let result = super.call(
      "totalRevenueShareProcessedByAsset",
      "totalRevenueShareProcessedByAsset(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );

    return result[0].toBigInt();
  }

  try_totalRevenueShareProcessedByAsset(
    param0: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "totalRevenueShareProcessedByAsset",
      "totalRevenueShareProcessedByAsset(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalSharesByReferral(param0: Address): BigInt {
    let result = super.call(
      "totalSharesByReferral",
      "totalSharesByReferral(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );

    return result[0].toBigInt();
  }

  try_totalSharesByReferral(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "totalSharesByReferral",
      "totalSharesByReferral(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalSharesByUserReferral(param0: Address, param1: Address): BigInt {
    let result = super.call(
      "totalSharesByUserReferral",
      "totalSharesByUserReferral(address,address):(uint256)",
      [ethereum.Value.fromAddress(param0), ethereum.Value.fromAddress(param1)]
    );

    return result[0].toBigInt();
  }

  try_totalSharesByUserReferral(
    param0: Address,
    param1: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "totalSharesByUserReferral",
      "totalSharesByUserReferral(address,address):(uint256)",
      [ethereum.Value.fromAddress(param0), ethereum.Value.fromAddress(param1)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalSharesInReferral(): BigInt {
    let result = super.call(
      "totalSharesInReferral",
      "totalSharesInReferral():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_totalSharesInReferral(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "totalSharesInReferral",
      "totalSharesInReferral():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalSupply(): BigInt {
    let result = super.call("totalSupply", "totalSupply():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalSupply(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("totalSupply", "totalSupply():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  transfer(to: Address, amount: BigInt): boolean {
    let result = super.call("transfer", "transfer(address,uint256):(bool)", [
      ethereum.Value.fromAddress(to),
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);

    return result[0].toBoolean();
  }

  try_transfer(to: Address, amount: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("transfer", "transfer(address,uint256):(bool)", [
      ethereum.Value.fromAddress(to),
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  transferFrom(from: Address, to: Address, amount: BigInt): boolean {
    let result = super.call(
      "transferFrom",
      "transferFrom(address,address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(from),
        ethereum.Value.fromAddress(to),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    );

    return result[0].toBoolean();
  }

  try_transferFrom(
    from: Address,
    to: Address,
    amount: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "transferFrom",
      "transferFrom(address,address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(from),
        ethereum.Value.fromAddress(to),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  yieldSourceVault(): Address {
    let result = super.call(
      "yieldSourceVault",
      "yieldSourceVault():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_yieldSourceVault(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "yieldSourceVault",
      "yieldSourceVault():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class AddRevenueShareReferralCall extends ethereum.Call {
  get inputs(): AddRevenueShareReferralCall__Inputs {
    return new AddRevenueShareReferralCall__Inputs(this);
  }

  get outputs(): AddRevenueShareReferralCall__Outputs {
    return new AddRevenueShareReferralCall__Outputs(this);
  }
}

export class AddRevenueShareReferralCall__Inputs {
  _call: AddRevenueShareReferralCall;

  constructor(call: AddRevenueShareReferralCall) {
    this._call = call;
  }

  get referral_(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class AddRevenueShareReferralCall__Outputs {
  _call: AddRevenueShareReferralCall;

  constructor(call: AddRevenueShareReferralCall) {
    this._call = call;
  }
}

export class ApproveCall extends ethereum.Call {
  get inputs(): ApproveCall__Inputs {
    return new ApproveCall__Inputs(this);
  }

  get outputs(): ApproveCall__Outputs {
    return new ApproveCall__Outputs(this);
  }
}

export class ApproveCall__Inputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get spender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ApproveCall__Outputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class DecreaseAllowanceCall extends ethereum.Call {
  get inputs(): DecreaseAllowanceCall__Inputs {
    return new DecreaseAllowanceCall__Inputs(this);
  }

  get outputs(): DecreaseAllowanceCall__Outputs {
    return new DecreaseAllowanceCall__Outputs(this);
  }
}

export class DecreaseAllowanceCall__Inputs {
  _call: DecreaseAllowanceCall;

  constructor(call: DecreaseAllowanceCall) {
    this._call = call;
  }

  get spender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get subtractedValue(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class DecreaseAllowanceCall__Outputs {
  _call: DecreaseAllowanceCall;

  constructor(call: DecreaseAllowanceCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class DepositToRevenueShareCall extends ethereum.Call {
  get inputs(): DepositToRevenueShareCall__Inputs {
    return new DepositToRevenueShareCall__Inputs(this);
  }

  get outputs(): DepositToRevenueShareCall__Outputs {
    return new DepositToRevenueShareCall__Outputs(this);
  }
}

export class DepositToRevenueShareCall__Inputs {
  _call: DepositToRevenueShareCall;

  constructor(call: DepositToRevenueShareCall) {
    this._call = call;
  }

  get asset_(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount_(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class DepositToRevenueShareCall__Outputs {
  _call: DepositToRevenueShareCall;

  constructor(call: DepositToRevenueShareCall) {
    this._call = call;
  }
}

export class DepositWithReferralCall extends ethereum.Call {
  get inputs(): DepositWithReferralCall__Inputs {
    return new DepositWithReferralCall__Inputs(this);
  }

  get outputs(): DepositWithReferralCall__Outputs {
    return new DepositWithReferralCall__Outputs(this);
  }
}

export class DepositWithReferralCall__Inputs {
  _call: DepositWithReferralCall;

  constructor(call: DepositWithReferralCall) {
    this._call = call;
  }

  get amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get receiver(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get referral(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class DepositWithReferralCall__Outputs {
  _call: DepositWithReferralCall;

  constructor(call: DepositWithReferralCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class IncreaseAllowanceCall extends ethereum.Call {
  get inputs(): IncreaseAllowanceCall__Inputs {
    return new IncreaseAllowanceCall__Inputs(this);
  }

  get outputs(): IncreaseAllowanceCall__Outputs {
    return new IncreaseAllowanceCall__Outputs(this);
  }
}

export class IncreaseAllowanceCall__Inputs {
  _call: IncreaseAllowanceCall;

  constructor(call: IncreaseAllowanceCall) {
    this._call = call;
  }

  get spender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get addedValue(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class IncreaseAllowanceCall__Outputs {
  _call: IncreaseAllowanceCall;

  constructor(call: IncreaseAllowanceCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class InitializeCall extends ethereum.Call {
  get inputs(): InitializeCall__Inputs {
    return new InitializeCall__Inputs(this);
  }

  get outputs(): InitializeCall__Outputs {
    return new InitializeCall__Outputs(this);
  }
}

export class InitializeCall__Inputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }

  get asset_(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get name_(): string {
    return this._call.inputValues[1].value.toString();
  }

  get symbol_(): string {
    return this._call.inputValues[2].value.toString();
  }

  get yieldSourceVault_(): Address {
    return this._call.inputValues[3].value.toAddress();
  }

  get cinchPerformanceFeePercentage_(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }
}

export class InitializeCall__Outputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class PauseCall extends ethereum.Call {
  get inputs(): PauseCall__Inputs {
    return new PauseCall__Inputs(this);
  }

  get outputs(): PauseCall__Outputs {
    return new PauseCall__Outputs(this);
  }
}

export class PauseCall__Inputs {
  _call: PauseCall;

  constructor(call: PauseCall) {
    this._call = call;
  }
}

export class PauseCall__Outputs {
  _call: PauseCall;

  constructor(call: PauseCall) {
    this._call = call;
  }
}

export class PauseDepositCall extends ethereum.Call {
  get inputs(): PauseDepositCall__Inputs {
    return new PauseDepositCall__Inputs(this);
  }

  get outputs(): PauseDepositCall__Outputs {
    return new PauseDepositCall__Outputs(this);
  }
}

export class PauseDepositCall__Inputs {
  _call: PauseDepositCall;

  constructor(call: PauseDepositCall) {
    this._call = call;
  }
}

export class PauseDepositCall__Outputs {
  _call: PauseDepositCall;

  constructor(call: PauseDepositCall) {
    this._call = call;
  }
}

export class RedeemWithReferralCall extends ethereum.Call {
  get inputs(): RedeemWithReferralCall__Inputs {
    return new RedeemWithReferralCall__Inputs(this);
  }

  get outputs(): RedeemWithReferralCall__Outputs {
    return new RedeemWithReferralCall__Outputs(this);
  }
}

export class RedeemWithReferralCall__Inputs {
  _call: RedeemWithReferralCall;

  constructor(call: RedeemWithReferralCall) {
    this._call = call;
  }

  get shares(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get receiver(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get sharesOwner(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get referral(): Address {
    return this._call.inputValues[3].value.toAddress();
  }
}

export class RedeemWithReferralCall__Outputs {
  _call: RedeemWithReferralCall;

  constructor(call: RedeemWithReferralCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class RemoveRevenueShareReferralCall extends ethereum.Call {
  get inputs(): RemoveRevenueShareReferralCall__Inputs {
    return new RemoveRevenueShareReferralCall__Inputs(this);
  }

  get outputs(): RemoveRevenueShareReferralCall__Outputs {
    return new RemoveRevenueShareReferralCall__Outputs(this);
  }
}

export class RemoveRevenueShareReferralCall__Inputs {
  _call: RemoveRevenueShareReferralCall;

  constructor(call: RemoveRevenueShareReferralCall) {
    this._call = call;
  }

  get referral_(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class RemoveRevenueShareReferralCall__Outputs {
  _call: RemoveRevenueShareReferralCall;

  constructor(call: RemoveRevenueShareReferralCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class SetCinchPerformanceFeePercentageCall extends ethereum.Call {
  get inputs(): SetCinchPerformanceFeePercentageCall__Inputs {
    return new SetCinchPerformanceFeePercentageCall__Inputs(this);
  }

  get outputs(): SetCinchPerformanceFeePercentageCall__Outputs {
    return new SetCinchPerformanceFeePercentageCall__Outputs(this);
  }
}

export class SetCinchPerformanceFeePercentageCall__Inputs {
  _call: SetCinchPerformanceFeePercentageCall;

  constructor(call: SetCinchPerformanceFeePercentageCall) {
    this._call = call;
  }

  get feePercentage_(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetCinchPerformanceFeePercentageCall__Outputs {
  _call: SetCinchPerformanceFeePercentageCall;

  constructor(call: SetCinchPerformanceFeePercentageCall) {
    this._call = call;
  }
}

export class SetTotalSharesInReferralAccordingToYieldSourceCall extends ethereum.Call {
  get inputs(): SetTotalSharesInReferralAccordingToYieldSourceCall__Inputs {
    return new SetTotalSharesInReferralAccordingToYieldSourceCall__Inputs(this);
  }

  get outputs(): SetTotalSharesInReferralAccordingToYieldSourceCall__Outputs {
    return new SetTotalSharesInReferralAccordingToYieldSourceCall__Outputs(
      this
    );
  }
}

export class SetTotalSharesInReferralAccordingToYieldSourceCall__Inputs {
  _call: SetTotalSharesInReferralAccordingToYieldSourceCall;

  constructor(call: SetTotalSharesInReferralAccordingToYieldSourceCall) {
    this._call = call;
  }

  get referral(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get user(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class SetTotalSharesInReferralAccordingToYieldSourceCall__Outputs {
  _call: SetTotalSharesInReferralAccordingToYieldSourceCall;

  constructor(call: SetTotalSharesInReferralAccordingToYieldSourceCall) {
    this._call = call;
  }
}

export class TransferCall extends ethereum.Call {
  get inputs(): TransferCall__Inputs {
    return new TransferCall__Inputs(this);
  }

  get outputs(): TransferCall__Outputs {
    return new TransferCall__Outputs(this);
  }
}

export class TransferCall__Inputs {
  _call: TransferCall;

  constructor(call: TransferCall) {
    this._call = call;
  }

  get to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class TransferCall__Outputs {
  _call: TransferCall;

  constructor(call: TransferCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class TransferFromCall extends ethereum.Call {
  get inputs(): TransferFromCall__Inputs {
    return new TransferFromCall__Inputs(this);
  }

  get outputs(): TransferFromCall__Outputs {
    return new TransferFromCall__Outputs(this);
  }
}

export class TransferFromCall__Inputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class TransferFromCall__Outputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class UnpauseCall extends ethereum.Call {
  get inputs(): UnpauseCall__Inputs {
    return new UnpauseCall__Inputs(this);
  }

  get outputs(): UnpauseCall__Outputs {
    return new UnpauseCall__Outputs(this);
  }
}

export class UnpauseCall__Inputs {
  _call: UnpauseCall;

  constructor(call: UnpauseCall) {
    this._call = call;
  }
}

export class UnpauseCall__Outputs {
  _call: UnpauseCall;

  constructor(call: UnpauseCall) {
    this._call = call;
  }
}

export class UnpauseDepositCall extends ethereum.Call {
  get inputs(): UnpauseDepositCall__Inputs {
    return new UnpauseDepositCall__Inputs(this);
  }

  get outputs(): UnpauseDepositCall__Outputs {
    return new UnpauseDepositCall__Outputs(this);
  }
}

export class UnpauseDepositCall__Inputs {
  _call: UnpauseDepositCall;

  constructor(call: UnpauseDepositCall) {
    this._call = call;
  }
}

export class UnpauseDepositCall__Outputs {
  _call: UnpauseDepositCall;

  constructor(call: UnpauseDepositCall) {
    this._call = call;
  }
}

export class WithdrawFromRevenueShareCall extends ethereum.Call {
  get inputs(): WithdrawFromRevenueShareCall__Inputs {
    return new WithdrawFromRevenueShareCall__Inputs(this);
  }

  get outputs(): WithdrawFromRevenueShareCall__Outputs {
    return new WithdrawFromRevenueShareCall__Outputs(this);
  }
}

export class WithdrawFromRevenueShareCall__Inputs {
  _call: WithdrawFromRevenueShareCall;

  constructor(call: WithdrawFromRevenueShareCall) {
    this._call = call;
  }

  get asset_(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount_(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get receiver_(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class WithdrawFromRevenueShareCall__Outputs {
  _call: WithdrawFromRevenueShareCall;

  constructor(call: WithdrawFromRevenueShareCall) {
    this._call = call;
  }
}
